<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>BMHS TSA</title><link>https://bmhstsa.com/</link><description>Recent content on BMHS TSA</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 31 Mar 2021 00:32:29 -0600</lastBuildDate><atom:link href="https://bmhstsa.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Web Gauntlet 3</title><link>https://bmhstsa.com/post/web-gauntlet-3/</link><pubDate>Wed, 31 Mar 2021 00:32:29 -0600</pubDate><guid>https://bmhstsa.com/post/web-gauntlet-3/</guid><description>&lt;h3 id="challenge-rating">Challenge Rating&lt;/h3>
&lt;ul>
&lt;li>Artificialness: &lt;code>3/10&lt;/code>&lt;/li>
&lt;li>Skill: &lt;code>6/10&lt;/code>&lt;/li>
&lt;li>Time: &lt;code>30 minutes&lt;/code> (Assuming you already solved &lt;a class="link" href="https://bmhstsa.com/post/web-gauntlet-2" >Web Gauntlet 2&lt;/a>)&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Learn more about how we rate challenges &lt;a class="link" href="https://bmhstsa.com/post/rating" >here&lt;/a>.&lt;/em>&lt;/p>
&lt;h2 id="preface">Preface&lt;/h2>
&lt;p>This is the followup challenge to &lt;a class="link" href="https://bmhstsa.com/post/web-gauntlet-2" >Web Gauntlet 2&lt;/a> which
itself is a followup to &lt;a class="link" href="https://play.picoctf.org/practice/challenge/88" target="_blank" rel="noopener"
>Web Gauntlet&lt;/a>. This article assumes you&amp;rsquo;ve already solved Web Gauntlet 2.&lt;/p>
&lt;h3 id="whats-different">What&amp;rsquo;s different?&lt;/h3>
&lt;p>Not a whole lot - just the maximum user input length. Our previous exploit
(&lt;code>admi'||CHAR(1540/LENGTH(&lt;/code> and &lt;code>))||'&lt;/code>) is 29 characters long. We only need to
shave off 4 characters to be within the 25 character limit, that shouldn&amp;rsquo;t be
too hard.&lt;/p>
&lt;h3 id="condensing-our-payload">Condensing our payload&lt;/h3>
&lt;p>The first thing I noticed is that the &lt;em>bridged&lt;/em> string (&lt;code> AND password=&lt;/code>) contains 1 of the characters in &lt;code>admin&lt;/code>: &lt;code>a&lt;/code>. Since SQLite also has a
&lt;a class="link" href="https://www.w3resource.com/sqlite/core-functions-substr.php" target="_blank" rel="noopener"
>&lt;code>SUBSTR&lt;/code> function&lt;/a>,
we can use that bridged text meaning we can eliminate &lt;code>CHAR(1540/LENGTH())&lt;/code>.
This leaves us with:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">SELECT&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">password&lt;/span> &lt;span class="k">FROM&lt;/span> &lt;span class="n">users&lt;/span> &lt;span class="k">WHERE&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="o">||&lt;/span>&lt;span class="n">substr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39; AND password=&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">||&lt;/span>&lt;span class="s1">&amp;#39;dmin&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now the total input is only 22 characters, 3 under the limit. Sweet! So if you
set the &lt;code>username&lt;/code> to &lt;code>'||substr(&lt;/code> and the &lt;code>password&lt;/code> to &lt;code>,7,1)||'dmin&lt;/code>,
you should see the flag on &lt;code>filter.php&lt;/code>.&lt;/p></description></item><item><title>Web Gauntlet 2</title><link>https://bmhstsa.com/post/web-gauntlet-2/</link><pubDate>Tue, 30 Mar 2021 23:26:46 -0600</pubDate><guid>https://bmhstsa.com/post/web-gauntlet-2/</guid><description>&lt;h3 id="challenge-rating">Challenge Rating&lt;/h3>
&lt;ul>
&lt;li>Artificialness: &lt;code>3/10&lt;/code>&lt;/li>
&lt;li>Skill: &lt;code>6/10&lt;/code>&lt;/li>
&lt;li>Time: &lt;code>2-3 hours&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Learn more about how we rate challenges &lt;a class="link" href="https://bmhstsa.com/post/rating" >here&lt;/a>.&lt;/em>&lt;/p>
&lt;h2 id="preface">Preface&lt;/h2>
&lt;p>This is the followup challenge to &lt;a class="link" href="https://play.picoctf.org/practice/challenge/88" target="_blank" rel="noopener"
>Web Gauntlet&lt;/a>.&lt;/p>
&lt;h2 id="what-are-sql-injections">What are SQL injections?&lt;/h2>
&lt;p>SQL injections occur when a server improperly handles user input in such a
way that the user can write SQL queries and run them on the server. For example,
lets say we&amp;rsquo;re running a simple web server that performs a username/password
lookup:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">SELECT&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">password&lt;/span> &lt;span class="k">FROM&lt;/span> &lt;span class="n">users&lt;/span> &lt;span class="k">WHERE&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;[USERNAME INPUT]&amp;#39;&lt;/span> &lt;span class="k">AND&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;[PASSWORD INPUT]&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Even if you don&amp;rsquo;t know SQL, you can probably figure out that we&amp;rsquo;re querying the
database for users with a &lt;code>username&lt;/code> equal to &lt;code>[USERNAME INPUT]&lt;/code> and a &lt;code>password&lt;/code>
equal to &lt;code>[PASSWORD INPUT]&lt;/code>. Well, say an attacker were to enter &lt;code>'&lt;/code>. Just a
single-quote. What do you think would happen? If the server was programmed
correctly, it would escape the quote or filter it out resulting in the following
query:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">SELECT&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">password&lt;/span> &lt;span class="k">FROM&lt;/span> &lt;span class="n">users&lt;/span> &lt;span class="k">WHERE&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;&amp;#39;&lt;/span> &lt;span class="k">AND&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;[PASSWORD INPUT]&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Note: you escape single-quotes by doubling them up in SQLite.&lt;/em>&lt;/p>
&lt;p>But if the server simply concatenates or adds strings together to form a query
such as with the below pseudocode:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="s2">&amp;#34;SELECT username, password FROM users WHERE username=&amp;#39;&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">username&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;&amp;#39; AND password=&amp;#39;&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">password&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;&amp;#39;;&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This would produce the following query:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">SELECT&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">password&lt;/span> &lt;span class="k">FROM&lt;/span> &lt;span class="n">users&lt;/span> &lt;span class="k">WHERE&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&amp;#39; AND password=&amp;#39;&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">PASSWORD&lt;/span> &lt;span class="k">INPUT&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="s1">&amp;#39;;
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Note: this is actually an invalid query but bare with me.&lt;/em>&lt;/p>
&lt;p>Notice how the syntax highlighting is different than when the server properly
escapes the single-quote? That&amp;rsquo;s because we now have a single string starting
with an escaped quote (&lt;code>'' AND password=&lt;/code>). This is called an injection
vulnerability because a crafty attacker could format the username or password
in such a way that when the server concatenates the user-input together, it
generates a totally different, malicious query.&lt;/p>
&lt;h2 id="solving-the-challenge">Solving the challenge&lt;/h2>
&lt;p>One important thing to note about this challenge is that our user-input cannot
contain any of the following &lt;code>or and true false union like = &amp;gt; &amp;lt; ; -- /* */ admin&lt;/code>
(Which can be found on the &lt;code>filter.php&lt;/code> page).&lt;/p>
&lt;h3 id="setting-the-username">Setting the username&lt;/h3>
&lt;p>So first we need to figure out how to query the &lt;code>admin&lt;/code> user without actually
typing &lt;code>admin&lt;/code> (Because it&amp;rsquo;s filtered). Luckily, SQLite (The flavor of SQL this
challenge uses) supports &lt;a class="link" href="https://www.techonthenet.com/sqlite/functions/concatenate.php" target="_blank" rel="noopener"
>string concatenation&lt;/a>
(&lt;em>Adding&lt;/em> two or more strings together). So now we can type &lt;code>admin&lt;/code> with the
following for the &lt;code>username&lt;/code>: &lt;code>admi'||'n&lt;/code> which will turn into:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">SELECT&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">password&lt;/span> &lt;span class="k">FROM&lt;/span> &lt;span class="n">users&lt;/span> &lt;span class="k">WHERE&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;admi&amp;#39;&lt;/span>&lt;span class="o">||&lt;/span>&lt;span class="s1">&amp;#39;n&amp;#39;&lt;/span> &lt;span class="k">AND&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;[PASSWORD INPUT]&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Sweet!&lt;/p>
&lt;h3 id="setting-the-password">Setting the password&lt;/h3>
&lt;p>We don&amp;rsquo;t know the password and this challenge isn&amp;rsquo;t about getting the password,
so we need to get more creative - think about ways of removing the &lt;code>AND&lt;/code> part
of the query.&lt;/p>
&lt;p>Remember how earlier when the attacker entered a single-quote (&lt;code>'&lt;/code>) it
generated an invalid SQL query because the string kind of &lt;em>bridged&lt;/em> the 2 user
inputs? Well if we do something with that string, then that eliminates the
&lt;code>password=&lt;/code> part of the query meaning we don&amp;rsquo;t have to guess or crack the
password.&lt;/p>
&lt;p>My solution is far from elegant but I decided to kill 2 birds with one stone by using the length of the &lt;em>bridged&lt;/em> string using the &lt;a class="link" href="https://www.w3resource.com/sqlite/core-functions-length.php" target="_blank" rel="noopener"
>SQLite &lt;code>LENGTH&lt;/code> function&lt;/a>
in combination with the &lt;a class="link" href="https://www.w3resource.com/sqlite/core-functions-char.php" target="_blank" rel="noopener"
>SQLite &lt;code>CHAR&lt;/code> function&lt;/a>
to generate the &lt;code>n&lt;/code> in &lt;code>admin&lt;/code> via &lt;a class="link" href="https://en.wikipedia.org/wiki/ASCII" target="_blank" rel="noopener"
>character codes&lt;/a>.&lt;/p>
&lt;p>In essence, the &lt;em>bridged&lt;/em> string is &lt;code> AND password=&lt;/code> (14 characters long) and
the ASCII character code for &lt;code>n&lt;/code> is 110. So then I multiplied 14 by 110 which
is 1540. Finally I concatenated an empty string at the end to make sure there
wasn&amp;rsquo;t an unmatched single-quote. When the server executes the query, it will
undo the multiplication and return the correct character code. I know this
sounds confusing but it&amp;rsquo;s somewhat simple when you see it written out:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">SELECT&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">password&lt;/span> &lt;span class="k">FROM&lt;/span> &lt;span class="n">users&lt;/span> &lt;span class="k">WHERE&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;admi&amp;#39;&lt;/span>&lt;span class="o">||&lt;/span>&lt;span class="nb">CHAR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1540&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="k">LENGTH&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39; AND password=&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="o">||&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>So if you set the &lt;code>username&lt;/code> to &lt;code>admi'||CHAR(1540/LENGTH(&lt;/code> and the password to
&lt;code>))||'&lt;/code>, you should see the flag on &lt;code>filter.php&lt;/code>. Again, not the most elegant
solution. If you want to see a more elegant solution, check out the sequel to
this challenge, &lt;a class="link" href="https://bmhstsa.com/post/web-gauntlet-3" >Web Gauntlet 3&lt;/a>.&lt;/p></description></item><item><title>Get Ahead</title><link>https://bmhstsa.com/post/get-ahead/</link><pubDate>Tue, 30 Mar 2021 22:38:13 -0600</pubDate><guid>https://bmhstsa.com/post/get-ahead/</guid><description>&lt;h3 id="challenge-rating">Challenge Rating&lt;/h3>
&lt;ul>
&lt;li>Artificialness: &lt;code>5/10&lt;/code>&lt;/li>
&lt;li>Skill: &lt;code>3/10&lt;/code>&lt;/li>
&lt;li>Time: &lt;code>5 minutes&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Learn more about how we rate challenges &lt;a class="link" href="https://bmhstsa.com/post/rating" >here&lt;/a>.&lt;/em>&lt;/p>
&lt;h2 id="what-are-http-verbs">What are HTTP verbs?&lt;/h2>
&lt;p>Normally when you access a website, your browser makes an HTTP request to &lt;code>GET&lt;/code>
content from the server. However, your browser isn&amp;rsquo;t always fetching data from a
server, sometimes it &lt;code>POST&lt;/code>s data too (Such as when logging in to a website). HTTP
verbs are the standardized method for telling the server what to do. The most common
HTTP verbs are:&lt;/p>
&lt;ul>
&lt;li>&lt;code>GET&lt;/code>: fetch data from a server (eg: retrieve an HTML file)&lt;/li>
&lt;li>&lt;code>HEAD&lt;/code>: check what the server will do before making a &lt;code>GET&lt;/code> request (eg: check response size before fetching something)&lt;/li>
&lt;li>&lt;code>POST&lt;/code>: post data to a server (eg: log in to a website)&lt;/li>
&lt;li>&lt;code>PUT&lt;/code>: update an existing resource&lt;/li>
&lt;li>&lt;code>DELETE&lt;/code>: delete a resource&lt;/li>
&lt;/ul>
&lt;h2 id="solving-the-challenge">Solving the challenge&lt;/h2>
&lt;p>Although the &lt;code>Get&lt;/code> in &lt;code>Get Ahead&lt;/code> may throw you off, remember that web browsers
make &lt;code>GET&lt;/code> requests by default so this challenge may be a little too easy if
all you had to do was just visit the link with a browser and open &lt;a class="link" href="https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_are_browser_developer_tools" target="_blank" rel="noopener"
>the inspector&lt;/a>.
Instead, focus on the &lt;code>Ahead&lt;/code> part - as in a &lt;code>HEAD&lt;/code> request. If you use a tool such
as &lt;a class="link" href="https://www.postman.com" target="_blank" rel="noopener"
>Postman&lt;/a>, this is fairly easy to do:
&lt;img src="https://bmhstsa.com/post/get-ahead/postman.png" alt="Postman screenshot" />&lt;/p>
&lt;p>Please note that the flag is a header, not the response body.&lt;/p></description></item><item><title>Rating</title><link>https://bmhstsa.com/post/rating/</link><pubDate>Tue, 30 Mar 2021 22:31:14 -0600</pubDate><guid>https://bmhstsa.com/post/rating/</guid><description>&lt;p>We rank CTF challenges on the following metrics:&lt;/p>
&lt;ul>
&lt;li>Artificialness&lt;/li>
&lt;li>Skill&lt;/li>
&lt;li>Time&lt;/li>
&lt;/ul>
&lt;h2 id="artificialness">Artificialness&lt;/h2>
&lt;p>This metric measures how contrived or artificial a challenge is. This metric is
measured on a scale from 1 to 10 where 1 represents a very realistic challenge
while a 10 represents a very artificial challenge.&lt;/p>
&lt;h2 id="skill">Skill&lt;/h2>
&lt;p>This metric measures how much skill a challenge requires to solve. If multiple
ways of solving a challenge are available, this metrics should reflect the easiest
one. This metric is also measured on a scale from 1 to 10 where 1 represents a
challenge a complete novice could solve and a 10 represents a challenge only subject
experts could solve.&lt;/p>
&lt;h2 id="time">Time&lt;/h2>
&lt;p>This metric measures how much time a challenge requires to solve on the first time
without any outside help. This metric is measured in hours and minutes.&lt;/p></description></item></channel></rss>