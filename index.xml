<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>BMHS TSA</title><link>https://bmhstsa.com/</link><description>Recent content on BMHS TSA</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 09 Apr 2021 16:06:11 -0600</lastBuildDate><atom:link href="https://bmhstsa.com/index.xml" rel="self" type="application/rss+xml"/><item><title>crackme-py</title><link>https://bmhstsa.com/post/crackme-py/</link><pubDate>Fri, 09 Apr 2021 16:06:11 -0600</pubDate><guid>https://bmhstsa.com/post/crackme-py/</guid><description>&lt;h3 id="challenge-rating">Challenge Rating&lt;/h3>
&lt;ul>
&lt;li>Artificialness: &lt;code>5/10&lt;/code>&lt;/li>
&lt;li>Skill: &lt;code>3/10&lt;/code>&lt;/li>
&lt;li>Time: &lt;code>5-10 minutes&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Learn more about how we rate challenges &lt;a class="link" href="https://bmhstsa.com/post/rating" >here&lt;/a>.&lt;/em>&lt;/p>
&lt;p>The CTF starts out by giving you a python file called &lt;code>crackme.py&lt;/code>. When you run
it, it just takes two numbers as input and outputs the largest. Not very helpful
for finding flags, unless&amp;hellip;&lt;/p>
&lt;h3 id="how-do-we-find-the-flag">How do we find the flag?&lt;/h3>
&lt;p>When you open the file in any text editor, you&amp;rsquo;ll see that there&amp;rsquo;s more to this
program than it seems. There&amp;rsquo;s a variable called &lt;code>bezos_cc_secret&lt;/code> that seemingly
has gibberish in it. But there&amp;rsquo;s another function, never used in the entire
program, called &lt;code>decode_secret&lt;/code> which (you guessed it) decodes &lt;code>bezos_cc_secret&lt;/code>.
Just call the function at the end of the program and run it again and you will
have your flag.&lt;/p></description></item><item><title>Wireshark Doo Dooo Do Doo</title><link>https://bmhstsa.com/post/wireshark-doo-dooo-do-doo/</link><pubDate>Fri, 09 Apr 2021 15:48:38 -0600</pubDate><guid>https://bmhstsa.com/post/wireshark-doo-dooo-do-doo/</guid><description>&lt;h3 id="challenge-rating">Challenge Rating&lt;/h3>
&lt;ul>
&lt;li>Artificialness: &lt;code>7/10&lt;/code>&lt;/li>
&lt;li>Skill: &lt;code>4/10&lt;/code>&lt;/li>
&lt;li>Time: &lt;code>15-30 minutes&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Learn more about how we rate challenges &lt;a class="link" href="https://bmhstsa.com/post/rating" >here&lt;/a>.&lt;/em>&lt;/p>
&lt;p>This challenge is a Wireshark-based challenge, which involves analyzing network
traffic through Wireshark.&lt;/p>
&lt;h3 id="what-software-do-you-need">What software do you need?&lt;/h3>
&lt;p>&lt;a class="link" href="https://www.wireshark.org/" target="_blank" rel="noopener"
>Wireshark&lt;/a> and a &lt;a class="link" href="https://rot13.com/" target="_blank" rel="noopener"
>ROT13&lt;/a> decoder,
which you can find online.&lt;/p>
&lt;h3 id="what-do-you-need-to-know-in-order-to-solve-it">What do you need to know in order to solve it?&lt;/h3>
&lt;p>You need to know how to export Wireshark objects into HTTP and possibly how to
recognize ROT13 encryptions if you don&amp;rsquo;t want to spend 20 minutes looking up
different decryption websites.&lt;/p>
&lt;h3 id="what-do-you-actually-do">What do you actually do?&lt;/h3>
&lt;p>Open the file in Wireshark, first of all. Then &lt;code>Export Objects&lt;/code> into &lt;code>HTTP&lt;/code> and
click &lt;code>Save All&lt;/code>. It&amp;rsquo;ll put all of the HTTP requests into the destination of your
choice, mine was Downloads, and then open the &lt;code>%5c&lt;/code> (which is a
&lt;a class="link" href="https://en.wikipedia.org/wiki/Percent-encoding" target="_blank" rel="noopener"
>percent-encoded&lt;/a> character)
folder in a text editor of your choice. The text is encoded in ROT13 which I
encoded after trying several other algorithms. The encrypted text contains the
flag.&lt;/p></description></item><item><title>X Marks the Spot</title><link>https://bmhstsa.com/post/x-marks-the-spot/</link><pubDate>Fri, 02 Apr 2021 23:39:19 -0600</pubDate><guid>https://bmhstsa.com/post/x-marks-the-spot/</guid><description>&lt;h3 id="challenge-rating">Challenge Rating&lt;/h3>
&lt;ul>
&lt;li>Artificialness: &lt;code>3/10&lt;/code>&lt;/li>
&lt;li>Skill: &lt;code>7/10&lt;/code>&lt;/li>
&lt;li>Time: &lt;code>4-6 hours&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Learn more about how we rate challenges &lt;a class="link" href="https://bmhstsa.com/post/rating" >here&lt;/a>.&lt;/em>&lt;/p>
&lt;h2 id="preface">Preface&lt;/h2>
&lt;p>This write-up assumes you understand what an injection vulnerability is. If you
don&amp;rsquo;t you, should check out &lt;a class="link" href="https://bmhstsa.com/post/web-gauntlet-2" >Web Gauntlet 2&lt;/a>.&lt;/p>
&lt;h2 id="what-is-xpath">What is XPath?&lt;/h2>
&lt;p>&lt;a class="link" href="https://en.wikipedia.org/wiki/XPath" target="_blank" rel="noopener"
>XPath&lt;/a> is the standard way of querying
data from an XML document (Similar to SQL). There are a few basic things you
need to know about XPath:&lt;/p>
&lt;ol>
&lt;li>Think of XPath queries like a file-path (&lt;code>/&lt;/code> separated, items are written in
a descending, hierarchical-order)&lt;/li>
&lt;li>A &lt;code>/&lt;/code> represents the root element&lt;/li>
&lt;li>A &lt;code>//&lt;/code> represents any element in any location&lt;/li>
&lt;li>You can extract an element&amp;rsquo;s content with &lt;code>{Element}/text()&lt;/code>
(eg: &lt;code>//user/name/text()&lt;/code> equals &lt;code>guest&lt;/code>)&lt;/li>
&lt;li>You can get a string&amp;rsquo;s length with &lt;a class="link" href="https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/string-length" target="_blank" rel="noopener"
>&lt;code>string-length&lt;/code>&lt;/a>
(eg: &lt;code>string-length('abc')&lt;/code> equals &lt;code>3&lt;/code>)&lt;/li>
&lt;li>You can get a substring with &lt;a class="link" href="https://developer.mozilla.org/en-US/docs/Web/XPath/Functions/substring" target="_blank" rel="noopener"
>&lt;code>substring&lt;/code>&lt;/a>
(eg: &lt;code>substring('abc', 2, 1)&lt;/code> equals &lt;code>b&lt;/code>; note: &lt;strong>XPath is one-indexed&lt;/strong>)&lt;/li>
&lt;li>You filter elements with &lt;code>[{Condition}]&lt;/code>
&lt;ol>
&lt;li>You can filter by position with &lt;code>[position() {Operator} {Number}]&lt;/code>
(eg: &lt;code>[position() = 2]&lt;/code>; note: &lt;strong>XPath is one-indexed&lt;/strong>)&lt;/li>
&lt;li>You can filter by string-matches with &lt;code>['A' = 'B']&lt;/code>&lt;/li>
&lt;li>You can join different conditions together with &lt;code>or&lt;/code> or &lt;code>and&lt;/code>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;h2 id="solving-the-challenge">Solving the challenge&lt;/h2>
&lt;h3 id="probable-query">Probable Query&lt;/h3>
&lt;p>In order to develop an injection, it helps to have a query (Although it likely
won&amp;rsquo;t be the same as the actual query picoCTF uses). To develop it, think about
what conditions the server uses to find a user element: does the user&amp;rsquo;s name equal
a user-controlled valued and does the user&amp;rsquo;s password equal another user-controlled
value? The probable query I developed was:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="o">//&lt;/span>&lt;span class="nt">user&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nt">text&lt;/span>&lt;span class="o">()=&lt;/span>&lt;span class="s1">&amp;#39;[USERNAME INPUT]&amp;#39;&lt;/span> &lt;span class="nt">and&lt;/span> &lt;span class="nt">pass&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nt">text&lt;/span>&lt;span class="o">()=&lt;/span>&lt;span class="s1">&amp;#39;[PASSWORD INPUT]&amp;#39;&lt;/span>&lt;span class="o">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="developing-an-injection">Developing an injection&lt;/h3>
&lt;p>Now that we have a probably query, we can start messing around with single-quote
injection to try to escape the user-controlled strings. I found using &lt;code>abc&lt;/code> as
the username and &lt;code>' or {CONDITION} and 'a'='a&lt;/code> as the password allows for us to
run arbitrary boolean expressions on the server (Note that &lt;code>You're on the right path.&lt;/code>
indicates &lt;code>true&lt;/code> while &lt;code>Login failure.&lt;/code> indicates &lt;code>false&lt;/code>). While this doesn&amp;rsquo;t
allow us to return strings, it&amp;rsquo;s a start.&lt;/p>
&lt;h3 id="exfiltrating-data">Exfiltrating data&lt;/h3>
&lt;p>We know we can evaluate a boolean expression but how can we extract a string? The
answer is by testing each character in a string until we get the correct
character and with enough characters, the entire string.&lt;/p>
&lt;p>Initially it may seem like this a place where binary search would work well - we
could possibly check if the nth character code is greater than the a certain
number however the &lt;a class="link" href="https://www.oreilly.com/library/view/xslt-2nd-edition/9780596527211/re156.html" target="_blank" rel="noopener"
>&lt;code>fn:string-to-codepoints&lt;/code>&lt;/a>
function is disabled. Therefore, we will have to go through each character
sequentially (Linear search). This is the part where this challenge gets very painful. The good news is that we can reasonably assume all characters are inside
of the &lt;a class="link" href="https://flaviocopes.com/printable-ascii-characters/" target="_blank" rel="noopener"
>printable ASCII range&lt;/a>
(97 characters) which is far easier to guess than say &lt;a class="link" href="https://en.wikipedia.org/wiki/Unicode" target="_blank" rel="noopener"
>Unicode&lt;/a>
(&lt;a class="link" href="https://www.unicode.org/versions/Unicode13.0.0/" target="_blank" rel="noopener"
>143,859 characters&lt;/a>).&lt;/p>
&lt;p>To expedite this process, I developed a mini library for data extraction
specifically for this challenge. You can view the source code
&lt;a class="link" href="https://gist.github.com/Wakeful-Cloud/82f56b039d37d8db291fd12ea6de8f15" target="_blank" rel="noopener"
>here&lt;/a>.
This took a long time to extract because I followed multiple incorrect paths
(Hence the flag&amp;rsquo;s message); but I did find &lt;a class="link" href="https://cutt.ly/9xhyyyR" target="_blank" rel="noopener"
>this XML playground&lt;/a>
to be extremely helpful for constructing XPath queries. Eventually, I was able
to extract the below XML document (And the flag too):&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;db&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;poems&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;poem&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;author&amp;gt;&lt;/span>Robert Frost&lt;span class="nt">&amp;lt;/author&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;title&amp;gt;&lt;/span>The Road Not Taken&lt;span class="nt">&amp;lt;/title&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;text&amp;gt;&lt;/span>[UNKNOWN]&lt;span class="nt">&amp;lt;/text&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/poem&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;poem&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;author&amp;gt;&lt;/span>William Carlos Williams&lt;span class="nt">&amp;lt;/author&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;title&amp;gt;&lt;/span>The Red Wheelbarrow&lt;span class="nt">&amp;lt;/title&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;text&amp;gt;&lt;/span>[UNKNOWN]&lt;span class="nt">&amp;lt;/text&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/poem&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;poem&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;author&amp;gt;&lt;/span>Pablo Neruda&lt;span class="nt">&amp;lt;/author&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;title&amp;gt;&lt;/span>Oda a la papa&lt;span class="nt">&amp;lt;/title&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;text&amp;gt;&lt;/span>[UNKNOWN]&lt;span class="nt">&amp;lt;/text&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/poem&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;poem&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;author&amp;gt;&lt;/span>Gwendolyn Brooks&lt;span class="nt">&amp;lt;/author&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;title&amp;gt;&lt;/span>We Real Cool&lt;span class="nt">&amp;lt;/title&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;text&amp;gt;&lt;/span>[UNKNOWN]&lt;span class="nt">&amp;lt;/text&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/poem&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;poem&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;author&amp;gt;&lt;/span>William Blake&lt;span class="nt">&amp;lt;/author&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;title&amp;gt;&lt;/span>The Tyger&lt;span class="nt">&amp;lt;/title&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;text&amp;gt;&lt;/span>[UNKNOWN]&lt;span class="nt">&amp;lt;/text&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/poem&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/poems&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;users&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;user&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;name&amp;gt;&lt;/span>guest&lt;span class="nt">&amp;lt;/name&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;pass&amp;gt;&lt;/span>thisisnottheflag&lt;span class="nt">&amp;lt;/pass&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/user&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;user&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;name&amp;gt;&lt;/span>bob&lt;span class="nt">&amp;lt;/name&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;pass&amp;gt;&lt;/span>thisisnottheflageither&lt;span class="nt">&amp;lt;/pass&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/user&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;user&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;name&amp;gt;&lt;/span>admin&lt;span class="nt">&amp;lt;/name&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;pass&amp;gt;&lt;/span>picoCTF{h0p3fully_u_t0ok_th3_r1ght_xp4th_f0505d9c}&lt;span class="nt">&amp;lt;/pass&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/user&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/users&amp;gt;&lt;/span>
&lt;span class="nt">&amp;lt;/db&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Note: &lt;code>[UNKNOWN]&lt;/code> represent strings that are very long and would take a long time to extract; you can probably make an educates guess though.&lt;/em>&lt;/p>
&lt;h3 id="data-verification">Data verification&lt;/h3>
&lt;p>While extracting the data is very time-consuming and requires potentially
thousands of HTTP requests, verifying the data is easy. For example, here&amp;rsquo;s
the login credentials to verify the flag (Which could change if you&amp;rsquo;re reading
this far in the future):&lt;/p>
&lt;ul>
&lt;li>Username: &lt;code>abc&lt;/code>&lt;/li>
&lt;li>Password: &lt;code>' or /db/users/user[position()=3]/pass/text() = 'picoCTF{h0p3fully_u_t0ok_th3_r1ght_xp4th_f0505d9c}' and 'a'='a&lt;/code>&lt;/li>
&lt;/ul></description></item><item><title>Mod 13</title><link>https://bmhstsa.com/post/mod-13/</link><pubDate>Fri, 02 Apr 2021 16:58:00 -0600</pubDate><guid>https://bmhstsa.com/post/mod-13/</guid><description>&lt;h1 id="mod-26">Mod 26&lt;/h1>
&lt;p>This is a rot 13 cypher!&lt;/p>
&lt;h2 id="what-is-rot-13">What is ROT 13?&lt;/h2>
&lt;p>ROT 13 is a cipher where every letter is rotated by 13 letters within the alphabet. It is a type of &lt;a class="link" href="https://en.wikipedia.org/wiki/Caesar_cipher" target="_blank" rel="noopener"
>caesar cipher&lt;/a>.&lt;/p>
&lt;h2 id="how-can-this-be-reversed">How can this be reversed?&lt;/h2>
&lt;p>Rot 13 can be reversed the same way as it is encypted, by rotating the letters
by thirteen charecters. In Python we can simply take the &lt;a class="link" href="https://en.wikipedia.org/wiki/ASCII" target="_blank" rel="noopener"
>ASCII&lt;/a>
value of each letter (take out special charecters and numbers),and add thirteen,
before using the modulo operator to &lt;code>loop back&lt;/code>to the beginning of the alphabet.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python3" data-lang="python3">&lt;span class="n">ex&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;cvpbPGSarkggvzrVyygelebhaqfbsebghyLicInt&amp;#39;&lt;/span>
&lt;span class="n">letts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="nb">range&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ex&lt;/span>&lt;span class="p">)):&lt;/span>
&lt;span class="n">letts&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ex&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">lower&lt;/span>&lt;span class="p">())&lt;/span>
&lt;span class="n">letts&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">ord&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">letts&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">97&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">13&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">26&lt;/span>
&lt;span class="n">letts&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">chr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">letts&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">97&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">letts&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The output will look something like:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python3" data-lang="python3">&lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;p&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;i&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;c&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;o&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;c&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;t&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;f&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;n&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;e&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;x&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;t&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;t&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;i&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;m&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;e&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;i&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;l&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;l&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;t&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;r&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;y&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;r&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;o&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;u&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;n&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;d&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;s&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;o&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;f&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;r&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;o&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;t&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;u&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;l&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;y&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;v&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;p&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;v&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;g&amp;#39;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Manually add back special charecters and capitalization and you will have your flag.&lt;/p>
&lt;h3 id="online-tools">Online Tools&lt;/h3>
&lt;p>You can also use the following online tools to accomplish the same thing:&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.dcode.fr/rot-13-cipher" target="_blank" rel="noopener"
>dcode.fr/rot-13-cipher&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://rot13.com" target="_blank" rel="noopener"
>rot13.com&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://cryptii.com/pipes/rot13-decoder" target="_blank" rel="noopener"
>cryptii.com/pipes/rot13-decoder&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Static Aint Always Noise</title><link>https://bmhstsa.com/post/static-aint-always-noise/</link><pubDate>Fri, 02 Apr 2021 16:57:30 -0600</pubDate><guid>https://bmhstsa.com/post/static-aint-always-noise/</guid><description>&lt;h3 id="challenge-rating">Challenge Rating&lt;/h3>
&lt;ul>
&lt;li>Artificialness: &lt;code>8/10&lt;/code>&lt;/li>
&lt;li>Skill: &lt;code>2/10&lt;/code>&lt;/li>
&lt;li>Time: &lt;code>3 minutes&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Learn more about how we rate challenges &lt;a class="link" href="https://bmhstsa.com/post/rating" >here&lt;/a>.&lt;/em>&lt;/p>
&lt;h3 id="what-software-do-you-need">What software do you need?&lt;/h3>
&lt;p>Notepad or a text editor.&lt;/p>
&lt;h3 id="what-do-you-need-to-know-in-order-to-solve-it">What do you need to know in order to solve it?&lt;/h3>
&lt;p>That nobody expects Notepad.&lt;/p>
&lt;h3 id="what-do-you-actually-do">What do you actually do?&lt;/h3>
&lt;p>Open the file in Notepad and CTRL+F for picoCTF.&lt;/p></description></item><item><title>Magikarp Ground Mission</title><link>https://bmhstsa.com/post/magikarp-ground-mission/</link><pubDate>Fri, 02 Apr 2021 16:46:31 -0600</pubDate><guid>https://bmhstsa.com/post/magikarp-ground-mission/</guid><description>&lt;h3 id="challenge-rating">Challenge Rating&lt;/h3>
&lt;ul>
&lt;li>Artificialness: &lt;code>4/10&lt;/code>&lt;/li>
&lt;li>Skill: &lt;code>3/10&lt;/code>&lt;/li>
&lt;li>Time: &lt;code>5-10 minutes&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Learn more about how we rate challenges &lt;a class="link" href="https://bmhstsa.com/post/rating" >here&lt;/a>.&lt;/em>&lt;/p>
&lt;h2 id="what-is-ssh">What is SSH?&lt;/h2>
&lt;p>SSH (Secure SHell) is a protocol for securely transmitting commands to a remote
computer. It makes it possible to access files, run commands, and more, just from
inside the terminal. More information can be found
&lt;a class="link" href="https://searchsecurity.techtarget.com/definition/Secure-Shell" target="_blank" rel="noopener"
>here&lt;/a>.&lt;/p>
&lt;h2 id="doing-the-challenge">Doing the challenge&lt;/h2>
&lt;p>Pico already gives you the command to use. When you first log in, the directory
you&amp;rsquo;re in has &lt;code>1of3.flag.txt&lt;/code> and &lt;code>instructions-to-2of3.txt&lt;/code>. Clearly, the flag
is split up into three different files. Use the &lt;code>cat&lt;/code> command to view these files
and follow the instructions to get the rest of the flag. Combine each of the
files in order (&lt;code>1of3.flag.txt&lt;/code>, &lt;code>2of3.flag.txt&lt;/code>, and &lt;code>3of3.flag.txt&lt;/code>) to get the
flag!&lt;/p></description></item><item><title>Matryoshka Doll</title><link>https://bmhstsa.com/post/matryoshka-doll/</link><pubDate>Fri, 02 Apr 2021 16:32:39 -0600</pubDate><guid>https://bmhstsa.com/post/matryoshka-doll/</guid><description>&lt;h3 id="challenge-rating">Challenge Rating&lt;/h3>
&lt;ul>
&lt;li>Artificialness: &lt;code>6/10&lt;/code>&lt;/li>
&lt;li>Skill: &lt;code>4/10&lt;/code>&lt;/li>
&lt;li>Time: &lt;code>10 minutes&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Learn more about how we rate challenges &lt;a class="link" href="https://bmhstsa.com/post/rating" >here&lt;/a>.&lt;/em>&lt;/p>
&lt;h3 id="what-software-do-you-need">What software do you need?&lt;/h3>
&lt;p>Any type of zip extraction, &lt;a class="link" href="https://www.7-zip.org/" target="_blank" rel="noopener"
>7zip&lt;/a> or &lt;a class="link" href="https://www.win-rar.com/start.html" target="_blank" rel="noopener"
>WinRAR&lt;/a> work fine.&lt;/p>
&lt;h3 id="what-do-you-need-to-know-in-order-to-solve-it">What do you need to know in order to solve it?&lt;/h3>
&lt;p>The aspect of this challenge is to find hidden files inside image files.&lt;/p>
&lt;h3 id="what-do-you-actually-do">What do you actually do?&lt;/h3>
&lt;p>Archive the original file with (in my case) WinRAR, then extract it.
In the extracted file, you&amp;rsquo;ll find another file and so on, so forth.
Continue the archive-extract until you find a text file which
contains the flag.&lt;/p></description></item><item><title>Web Gauntlet 3</title><link>https://bmhstsa.com/post/web-gauntlet-3/</link><pubDate>Wed, 31 Mar 2021 00:32:29 -0600</pubDate><guid>https://bmhstsa.com/post/web-gauntlet-3/</guid><description>&lt;h3 id="challenge-rating">Challenge Rating&lt;/h3>
&lt;ul>
&lt;li>Artificialness: &lt;code>3/10&lt;/code>&lt;/li>
&lt;li>Skill: &lt;code>6/10&lt;/code>&lt;/li>
&lt;li>Time: &lt;code>30 minutes&lt;/code> (Assuming you already solved &lt;a class="link" href="https://bmhstsa.com/post/web-gauntlet-2" >Web Gauntlet 2&lt;/a>)&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Learn more about how we rate challenges &lt;a class="link" href="https://bmhstsa.com/post/rating" >here&lt;/a>.&lt;/em>&lt;/p>
&lt;h2 id="preface">Preface&lt;/h2>
&lt;p>This is the followup challenge to &lt;a class="link" href="https://bmhstsa.com/post/web-gauntlet-2" >Web Gauntlet 2&lt;/a> which
itself is a followup to &lt;a class="link" href="https://play.picoctf.org/practice/challenge/88" target="_blank" rel="noopener"
>Web Gauntlet&lt;/a>. This article assumes you&amp;rsquo;ve already solved Web Gauntlet 2.&lt;/p>
&lt;h3 id="whats-different">What&amp;rsquo;s different?&lt;/h3>
&lt;p>Not a whole lot - just the maximum user input length. Our previous exploit
(&lt;code>admi'||CHAR(1540/LENGTH(&lt;/code> and &lt;code>))||'&lt;/code>) is 29 characters long. We only need to
shave off 4 characters to be within the 25 character limit, that shouldn&amp;rsquo;t be
too hard.&lt;/p>
&lt;h3 id="condensing-our-payload">Condensing our payload&lt;/h3>
&lt;p>The first thing I noticed is that the &lt;em>bridged&lt;/em> string (&lt;code> AND password=&lt;/code>) contains 1 of the characters in &lt;code>admin&lt;/code>: &lt;code>a&lt;/code>. Since SQLite also has a
&lt;a class="link" href="https://www.w3resource.com/sqlite/core-functions-substr.php" target="_blank" rel="noopener"
>&lt;code>SUBSTR&lt;/code> function&lt;/a>,
we can use that bridged text meaning we can eliminate &lt;code>CHAR(1540/LENGTH())&lt;/code>.
This leaves us with:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">SELECT&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">password&lt;/span> &lt;span class="k">FROM&lt;/span> &lt;span class="n">users&lt;/span> &lt;span class="k">WHERE&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="o">||&lt;/span>&lt;span class="n">substr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39; AND password=&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">||&lt;/span>&lt;span class="s1">&amp;#39;dmin&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now the total input is only 22 characters, 3 under the limit. Sweet! So if you
set the &lt;code>username&lt;/code> to &lt;code>'||substr(&lt;/code> and the &lt;code>password&lt;/code> to &lt;code>,7,1)||'dmin&lt;/code>,
you should see the flag on &lt;code>filter.php&lt;/code>.&lt;/p></description></item><item><title>Web Gauntlet 2</title><link>https://bmhstsa.com/post/web-gauntlet-2/</link><pubDate>Tue, 30 Mar 2021 23:26:46 -0600</pubDate><guid>https://bmhstsa.com/post/web-gauntlet-2/</guid><description>&lt;h3 id="challenge-rating">Challenge Rating&lt;/h3>
&lt;ul>
&lt;li>Artificialness: &lt;code>3/10&lt;/code>&lt;/li>
&lt;li>Skill: &lt;code>6/10&lt;/code>&lt;/li>
&lt;li>Time: &lt;code>2-3 hours&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Learn more about how we rate challenges &lt;a class="link" href="https://bmhstsa.com/post/rating" >here&lt;/a>.&lt;/em>&lt;/p>
&lt;h2 id="preface">Preface&lt;/h2>
&lt;p>This is the followup challenge to &lt;a class="link" href="https://play.picoctf.org/practice/challenge/88" target="_blank" rel="noopener"
>Web Gauntlet&lt;/a>.&lt;/p>
&lt;h2 id="what-are-sql-injections">What are SQL injections?&lt;/h2>
&lt;p>SQL injections occur when a server improperly handles user input in such a
way that the user can write SQL queries and run them on the server. For example,
lets say we&amp;rsquo;re running a simple web server that performs a username/password
lookup:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">SELECT&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">password&lt;/span> &lt;span class="k">FROM&lt;/span> &lt;span class="n">users&lt;/span> &lt;span class="k">WHERE&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;[USERNAME INPUT]&amp;#39;&lt;/span> &lt;span class="k">AND&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;[PASSWORD INPUT]&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Even if you don&amp;rsquo;t know SQL, you can probably figure out that we&amp;rsquo;re querying the
database for users with a &lt;code>username&lt;/code> equal to &lt;code>[USERNAME INPUT]&lt;/code> and a &lt;code>password&lt;/code>
equal to &lt;code>[PASSWORD INPUT]&lt;/code>. Well, say an attacker were to enter &lt;code>'&lt;/code>. Just a
single-quote. What do you think would happen? If the server was programmed
correctly, it would escape the quote or filter it out resulting in the following
query:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">SELECT&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">password&lt;/span> &lt;span class="k">FROM&lt;/span> &lt;span class="n">users&lt;/span> &lt;span class="k">WHERE&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&amp;#39;&amp;#39;&lt;/span> &lt;span class="k">AND&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;[PASSWORD INPUT]&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Note: you escape single-quotes by doubling them up in SQLite.&lt;/em>&lt;/p>
&lt;p>But if the server simply concatenates or adds strings together to form a query
such as with the below pseudocode:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-javascript" data-lang="javascript">&lt;span class="s2">&amp;#34;SELECT username, password FROM users WHERE username=&amp;#39;&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">username&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;&amp;#39; AND password=&amp;#39;&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">password&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;&amp;#39;;&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This would produce the following query:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">SELECT&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">password&lt;/span> &lt;span class="k">FROM&lt;/span> &lt;span class="n">users&lt;/span> &lt;span class="k">WHERE&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&amp;#39; AND password=&amp;#39;&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">PASSWORD&lt;/span> &lt;span class="k">INPUT&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="s1">&amp;#39;;
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>Note: this is actually an invalid query but bare with me.&lt;/em>&lt;/p>
&lt;p>Notice how the syntax highlighting is different than when the server properly
escapes the single-quote? That&amp;rsquo;s because we now have a single string starting
with an escaped quote (&lt;code>'' AND password=&lt;/code>). This is called an injection
vulnerability because a crafty attacker could format the username or password
in such a way that when the server concatenates the user-input together, it
generates a totally different, malicious query.&lt;/p>
&lt;h2 id="solving-the-challenge">Solving the challenge&lt;/h2>
&lt;p>One important thing to note about this challenge is that our user-input cannot
contain any of the following &lt;code>or and true false union like = &amp;gt; &amp;lt; ; -- /* */ admin&lt;/code>
(Which can be found on the &lt;code>filter.php&lt;/code> page).&lt;/p>
&lt;h3 id="setting-the-username">Setting the username&lt;/h3>
&lt;p>So first we need to figure out how to query the &lt;code>admin&lt;/code> user without actually
typing &lt;code>admin&lt;/code> (Because it&amp;rsquo;s filtered). Luckily, SQLite (The flavor of SQL this
challenge uses) supports &lt;a class="link" href="https://www.techonthenet.com/sqlite/functions/concatenate.php" target="_blank" rel="noopener"
>string concatenation&lt;/a>
(&lt;em>Adding&lt;/em> two or more strings together). So now we can type &lt;code>admin&lt;/code> with the
following for the &lt;code>username&lt;/code>: &lt;code>admi'||'n&lt;/code> which will turn into:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">SELECT&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">password&lt;/span> &lt;span class="k">FROM&lt;/span> &lt;span class="n">users&lt;/span> &lt;span class="k">WHERE&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;admi&amp;#39;&lt;/span>&lt;span class="o">||&lt;/span>&lt;span class="s1">&amp;#39;n&amp;#39;&lt;/span> &lt;span class="k">AND&lt;/span> &lt;span class="n">password&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;[PASSWORD INPUT]&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Sweet!&lt;/p>
&lt;h3 id="setting-the-password">Setting the password&lt;/h3>
&lt;p>We don&amp;rsquo;t know the password and this challenge isn&amp;rsquo;t about getting the password,
so we need to get more creative - think about ways of removing the &lt;code>AND&lt;/code> part
of the query.&lt;/p>
&lt;p>Remember how earlier when the attacker entered a single-quote (&lt;code>'&lt;/code>) it
generated an invalid SQL query because the string kind of &lt;em>bridged&lt;/em> the 2 user
inputs? Well if we do something with that string, then that eliminates the
&lt;code>password=&lt;/code> part of the query meaning we don&amp;rsquo;t have to guess or crack the
password.&lt;/p>
&lt;p>My solution is far from elegant but I decided to kill 2 birds with one stone by using the length of the &lt;em>bridged&lt;/em> string using the &lt;a class="link" href="https://www.w3resource.com/sqlite/core-functions-length.php" target="_blank" rel="noopener"
>SQLite &lt;code>LENGTH&lt;/code> function&lt;/a>
in combination with the &lt;a class="link" href="https://www.w3resource.com/sqlite/core-functions-char.php" target="_blank" rel="noopener"
>SQLite &lt;code>CHAR&lt;/code> function&lt;/a>
to generate the &lt;code>n&lt;/code> in &lt;code>admin&lt;/code> via &lt;a class="link" href="https://en.wikipedia.org/wiki/ASCII" target="_blank" rel="noopener"
>character codes&lt;/a>.&lt;/p>
&lt;p>In essence, the &lt;em>bridged&lt;/em> string is &lt;code> AND password=&lt;/code> (14 characters long) and
the ASCII character code for &lt;code>n&lt;/code> is 110. So then I multiplied 14 by 110 which
is 1540. Finally I concatenated an empty string at the end to make sure there
wasn&amp;rsquo;t an unmatched single-quote. When the server executes the query, it will
undo the multiplication and return the correct character code. I know this
sounds confusing but it&amp;rsquo;s somewhat simple when you see it written out:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="k">SELECT&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">password&lt;/span> &lt;span class="k">FROM&lt;/span> &lt;span class="n">users&lt;/span> &lt;span class="k">WHERE&lt;/span> &lt;span class="n">username&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;admi&amp;#39;&lt;/span>&lt;span class="o">||&lt;/span>&lt;span class="nb">CHAR&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1540&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="k">LENGTH&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39; AND password=&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="o">||&lt;/span>&lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>So if you set the &lt;code>username&lt;/code> to &lt;code>admi'||CHAR(1540/LENGTH(&lt;/code> and the password to
&lt;code>))||'&lt;/code>, you should see the flag on &lt;code>filter.php&lt;/code>. Again, not the most elegant
solution. If you want to see a more elegant solution, check out the sequel to
this challenge, &lt;a class="link" href="https://bmhstsa.com/post/web-gauntlet-3" >Web Gauntlet 3&lt;/a>.&lt;/p></description></item><item><title>Get Ahead</title><link>https://bmhstsa.com/post/get-ahead/</link><pubDate>Tue, 30 Mar 2021 22:38:13 -0600</pubDate><guid>https://bmhstsa.com/post/get-ahead/</guid><description>&lt;h3 id="challenge-rating">Challenge Rating&lt;/h3>
&lt;ul>
&lt;li>Artificialness: &lt;code>5/10&lt;/code>&lt;/li>
&lt;li>Skill: &lt;code>3/10&lt;/code>&lt;/li>
&lt;li>Time: &lt;code>5 minutes&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Learn more about how we rate challenges &lt;a class="link" href="https://bmhstsa.com/post/rating" >here&lt;/a>.&lt;/em>&lt;/p>
&lt;h2 id="what-are-http-verbs">What are HTTP verbs?&lt;/h2>
&lt;p>Normally when you access a website, your browser makes an HTTP request to &lt;code>GET&lt;/code>
content from the server. However, your browser isn&amp;rsquo;t always fetching data from a
server, sometimes it &lt;code>POST&lt;/code>s data too (Such as when logging in to a website). HTTP
verbs are the standardized method for telling the server what to do. The most common
HTTP verbs are:&lt;/p>
&lt;ul>
&lt;li>&lt;code>GET&lt;/code>: fetch data from a server (eg: retrieve an HTML file)&lt;/li>
&lt;li>&lt;code>HEAD&lt;/code>: check what the server will do before making a &lt;code>GET&lt;/code> request (eg: check response size before fetching something)&lt;/li>
&lt;li>&lt;code>POST&lt;/code>: post data to a server (eg: log in to a website)&lt;/li>
&lt;li>&lt;code>PUT&lt;/code>: update an existing resource&lt;/li>
&lt;li>&lt;code>DELETE&lt;/code>: delete a resource&lt;/li>
&lt;/ul>
&lt;h2 id="solving-the-challenge">Solving the challenge&lt;/h2>
&lt;p>Although the &lt;code>Get&lt;/code> in &lt;code>Get Ahead&lt;/code> may throw you off, remember that web browsers
make &lt;code>GET&lt;/code> requests by default so this challenge may be a little too easy if
all you had to do was just visit the link with a browser and open &lt;a class="link" href="https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_are_browser_developer_tools" target="_blank" rel="noopener"
>the inspector&lt;/a>.
Instead, focus on the &lt;code>Ahead&lt;/code> part - as in a &lt;code>HEAD&lt;/code> request. If you use a tool such
as &lt;a class="link" href="https://www.postman.com" target="_blank" rel="noopener"
>Postman&lt;/a>, this is fairly easy to do:
&lt;img src="https://bmhstsa.com/post/get-ahead/postman.png" alt="Postman screenshot" />&lt;/p>
&lt;p>Please note that the flag is a header, not the response body.&lt;/p></description></item><item><title>Rating</title><link>https://bmhstsa.com/post/rating/</link><pubDate>Tue, 30 Mar 2021 22:31:14 -0600</pubDate><guid>https://bmhstsa.com/post/rating/</guid><description>&lt;p>We rank CTF challenges on the following metrics:&lt;/p>
&lt;ul>
&lt;li>Artificialness&lt;/li>
&lt;li>Skill&lt;/li>
&lt;li>Time&lt;/li>
&lt;/ul>
&lt;h2 id="artificialness">Artificialness&lt;/h2>
&lt;p>This metric measures how contrived or artificial a challenge is. This metric is
measured on a scale from 1 to 10 where 1 represents a very realistic challenge
while a 10 represents a very artificial challenge.&lt;/p>
&lt;h2 id="skill">Skill&lt;/h2>
&lt;p>This metric measures how much skill a challenge requires to solve. If multiple
ways of solving a challenge are available, this metrics should reflect the easiest
one. This metric is also measured on a scale from 1 to 10 where 1 represents a
challenge a complete novice could solve and a 10 represents a challenge only subject
experts could solve.&lt;/p>
&lt;h2 id="time">Time&lt;/h2>
&lt;p>This metric measures how much time a challenge requires to solve on the first time
without any outside help. This metric is measured in hours and minutes.&lt;/p></description></item></channel></rss>